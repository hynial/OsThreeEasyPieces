{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Build with g++",
            "type": "shell", // // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "command": "g++", // g++
            "args": [
                "-g",
                "-Wall",
                "-Wextra",
                "-Wpedantic",
                "-std=c++11", // c11 c++11
                // "-stdlib=libc++",
                "${file}",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}",
                // "--debug"
                //"-Wall", // 开启额外警告
                //"-static-libgcc",     // 静态链接libgcc，一般都会加上
                //"-fexec-charset=GBK", // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
                // C++最新标准为c++17，或根据自己的需要进行修改
              ],
            "group": {
                "kind": "build",
                "isDefault": true, // 不为true时ctrl shift B就要手动选择了
            },
            // "presentation": {
            //     "echo": true,  
            //     "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
            //     "focus": false,     // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
            //     "panel": "shared"   // 不同的文件的编译信息共享一个终端面板
            // },
            // "problemMatcher":"$gcc" // 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错
        },
        {
            "label": "run",
            "type": "shell",
            "command": "cd ${fileDirname}/ && ./${fileBasenameNoExtension}",
            "dependsOn": ["Build with g++"]
        }      
    ]
}